/* 
 * Insurance API
 *
 * Insurance API Curd Operations
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Model containing insurance info
    /// </summary>
    [DataContract]
        public partial class Quote :  IEquatable<Quote>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Quote" /> class.
        /// </summary>
        /// <param name="submissionNo">submissionNo.</param>
        /// <param name="applicantName">applicantName.</param>
        /// <param name="insuranceType">insuranceType.</param>
        public Quote(string submissionNo = default(string), string applicantName = default(string), string insuranceType = default(string))
        {
            this.SubmissionNo = submissionNo;
            this.ApplicantName = applicantName;
            this.InsuranceType = insuranceType;
        }
        
        /// <summary>
        /// Gets or Sets SubmissionNo
        /// </summary>
        [DataMember(Name="submissionNo", EmitDefaultValue=false)]
        public string SubmissionNo { get; set; }

        /// <summary>
        /// Gets or Sets ApplicantName
        /// </summary>
        [DataMember(Name="applicantName", EmitDefaultValue=false)]
        public string ApplicantName { get; set; }

        /// <summary>
        /// Gets or Sets InsuranceType
        /// </summary>
        [DataMember(Name="insuranceType", EmitDefaultValue=false)]
        public string InsuranceType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Quote {\n");
            sb.Append("  SubmissionNo: ").Append(SubmissionNo).Append("\n");
            sb.Append("  ApplicantName: ").Append(ApplicantName).Append("\n");
            sb.Append("  InsuranceType: ").Append(InsuranceType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Quote);
        }

        /// <summary>
        /// Returns true if Quote instances are equal
        /// </summary>
        /// <param name="input">Instance of Quote to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Quote input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SubmissionNo == input.SubmissionNo ||
                    (this.SubmissionNo != null &&
                    this.SubmissionNo.Equals(input.SubmissionNo))
                ) && 
                (
                    this.ApplicantName == input.ApplicantName ||
                    (this.ApplicantName != null &&
                    this.ApplicantName.Equals(input.ApplicantName))
                ) && 
                (
                    this.InsuranceType == input.InsuranceType ||
                    (this.InsuranceType != null &&
                    this.InsuranceType.Equals(input.InsuranceType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SubmissionNo != null)
                    hashCode = hashCode * 59 + this.SubmissionNo.GetHashCode();
                if (this.ApplicantName != null)
                    hashCode = hashCode * 59 + this.ApplicantName.GetHashCode();
                if (this.InsuranceType != null)
                    hashCode = hashCode * 59 + this.InsuranceType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
