/* 
 * Insurance API
 *
 * Insurance API Curd Operations
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Policy Inputs
    /// </summary>
    [DataContract]
        public partial class Policy :  IEquatable<Policy>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Policy" /> class.
        /// </summary>
        /// <param name="policyID">policyID.</param>
        /// <param name="premium">premium.</param>
        /// <param name="terms">terms.</param>
        /// <param name="riders">riders.</param>
        /// <param name="effectiveFrom">effectiveFrom.</param>
        /// <param name="activeTill">activeTill.</param>
        public Policy(int? policyID = default(int?), int? premium = default(int?), string terms = default(string), string riders = default(string), string effectiveFrom = default(string), string activeTill = default(string))
        {
            this.PolicyID = policyID;
            this.Premium = premium;
            this.Terms = terms;
            this.Riders = riders;
            this.EffectiveFrom = effectiveFrom;
            this.ActiveTill = activeTill;
        }
        
        /// <summary>
        /// Gets or Sets PolicyID
        /// </summary>
        [DataMember(Name="PolicyID", EmitDefaultValue=false)]
        public int? PolicyID { get; set; }

        /// <summary>
        /// Gets or Sets Premium
        /// </summary>
        [DataMember(Name="Premium", EmitDefaultValue=false)]
        public int? Premium { get; set; }

        /// <summary>
        /// Gets or Sets Terms
        /// </summary>
        [DataMember(Name="Terms", EmitDefaultValue=false)]
        public string Terms { get; set; }

        /// <summary>
        /// Gets or Sets Riders
        /// </summary>
        [DataMember(Name="Riders", EmitDefaultValue=false)]
        public string Riders { get; set; }

        /// <summary>
        /// Gets or Sets EffectiveFrom
        /// </summary>
        [DataMember(Name="Effective From", EmitDefaultValue=false)]
        public string EffectiveFrom { get; set; }

        /// <summary>
        /// Gets or Sets ActiveTill
        /// </summary>
        [DataMember(Name="Active Till", EmitDefaultValue=false)]
        public string ActiveTill { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Policy {\n");
            sb.Append("  PolicyID: ").Append(PolicyID).Append("\n");
            sb.Append("  Premium: ").Append(Premium).Append("\n");
            sb.Append("  Terms: ").Append(Terms).Append("\n");
            sb.Append("  Riders: ").Append(Riders).Append("\n");
            sb.Append("  EffectiveFrom: ").Append(EffectiveFrom).Append("\n");
            sb.Append("  ActiveTill: ").Append(ActiveTill).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Policy);
        }

        /// <summary>
        /// Returns true if Policy instances are equal
        /// </summary>
        /// <param name="input">Instance of Policy to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Policy input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PolicyID == input.PolicyID ||
                    (this.PolicyID != null &&
                    this.PolicyID.Equals(input.PolicyID))
                ) && 
                (
                    this.Premium == input.Premium ||
                    (this.Premium != null &&
                    this.Premium.Equals(input.Premium))
                ) && 
                (
                    this.Terms == input.Terms ||
                    (this.Terms != null &&
                    this.Terms.Equals(input.Terms))
                ) && 
                (
                    this.Riders == input.Riders ||
                    (this.Riders != null &&
                    this.Riders.Equals(input.Riders))
                ) && 
                (
                    this.EffectiveFrom == input.EffectiveFrom ||
                    (this.EffectiveFrom != null &&
                    this.EffectiveFrom.Equals(input.EffectiveFrom))
                ) && 
                (
                    this.ActiveTill == input.ActiveTill ||
                    (this.ActiveTill != null &&
                    this.ActiveTill.Equals(input.ActiveTill))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PolicyID != null)
                    hashCode = hashCode * 59 + this.PolicyID.GetHashCode();
                if (this.Premium != null)
                    hashCode = hashCode * 59 + this.Premium.GetHashCode();
                if (this.Terms != null)
                    hashCode = hashCode * 59 + this.Terms.GetHashCode();
                if (this.Riders != null)
                    hashCode = hashCode * 59 + this.Riders.GetHashCode();
                if (this.EffectiveFrom != null)
                    hashCode = hashCode * 59 + this.EffectiveFrom.GetHashCode();
                if (this.ActiveTill != null)
                    hashCode = hashCode * 59 + this.ActiveTill.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
