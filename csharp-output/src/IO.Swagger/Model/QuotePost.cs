/* 
 * Insurance API
 *
 * Insurance API Curd Operations
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Model containing Insurance info input
    /// </summary>
    [DataContract]
        public partial class QuotePost :  IEquatable<QuotePost>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QuotePost" /> class.
        /// </summary>
        /// <param name="effectiveDate">effectiveDate.</param>
        /// <param name="retroDate">retroDate.</param>
        /// <param name="zipcode">zipcode.</param>
        /// <param name="grossRevenues">grossRevenues.</param>
        /// <param name="noOfPhysicians">noOfPhysicians.</param>
        /// <param name="gL">gL.</param>
        /// <param name="eBL">eBL.</param>
        /// <param name="hNOA">hNOA.</param>
        /// <param name="laser">laser.</param>
        /// <param name="retention">retention.</param>
        /// <param name="premium">premium.</param>
        public QuotePost(string effectiveDate = default(string), string retroDate = default(string), int? zipcode = default(int?), int? grossRevenues = default(int?), int? noOfPhysicians = default(int?), bool? gL = default(bool?), bool? eBL = default(bool?), bool? hNOA = default(bool?), string laser = default(string), int? retention = default(int?), int? premium = default(int?))
        {
            this.EffectiveDate = effectiveDate;
            this.RetroDate = retroDate;
            this.Zipcode = zipcode;
            this.GrossRevenues = grossRevenues;
            this.NoOfPhysicians = noOfPhysicians;
            this.GL = gL;
            this.EBL = eBL;
            this.HNOA = hNOA;
            this.Laser = laser;
            this.Retention = retention;
            this.Premium = premium;
        }
        
        /// <summary>
        /// Gets or Sets EffectiveDate
        /// </summary>
        [DataMember(Name="effectiveDate", EmitDefaultValue=false)]
        public string EffectiveDate { get; set; }

        /// <summary>
        /// Gets or Sets RetroDate
        /// </summary>
        [DataMember(Name="retroDate", EmitDefaultValue=false)]
        public string RetroDate { get; set; }

        /// <summary>
        /// Gets or Sets Zipcode
        /// </summary>
        [DataMember(Name="zipcode", EmitDefaultValue=false)]
        public int? Zipcode { get; set; }

        /// <summary>
        /// Gets or Sets GrossRevenues
        /// </summary>
        [DataMember(Name="grossRevenues", EmitDefaultValue=false)]
        public int? GrossRevenues { get; set; }

        /// <summary>
        /// Gets or Sets NoOfPhysicians
        /// </summary>
        [DataMember(Name="noOfPhysicians", EmitDefaultValue=false)]
        public int? NoOfPhysicians { get; set; }

        /// <summary>
        /// Gets or Sets GL
        /// </summary>
        [DataMember(Name="GL", EmitDefaultValue=false)]
        public bool? GL { get; set; }

        /// <summary>
        /// Gets or Sets EBL
        /// </summary>
        [DataMember(Name="EBL", EmitDefaultValue=false)]
        public bool? EBL { get; set; }

        /// <summary>
        /// Gets or Sets HNOA
        /// </summary>
        [DataMember(Name="HNOA", EmitDefaultValue=false)]
        public bool? HNOA { get; set; }

        /// <summary>
        /// Gets or Sets Laser
        /// </summary>
        [DataMember(Name="laser", EmitDefaultValue=false)]
        public string Laser { get; set; }

        /// <summary>
        /// Gets or Sets Retention
        /// </summary>
        [DataMember(Name="retention", EmitDefaultValue=false)]
        public int? Retention { get; set; }

        /// <summary>
        /// Gets or Sets Premium
        /// </summary>
        [DataMember(Name="premium", EmitDefaultValue=false)]
        public int? Premium { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class QuotePost {\n");
            sb.Append("  EffectiveDate: ").Append(EffectiveDate).Append("\n");
            sb.Append("  RetroDate: ").Append(RetroDate).Append("\n");
            sb.Append("  Zipcode: ").Append(Zipcode).Append("\n");
            sb.Append("  GrossRevenues: ").Append(GrossRevenues).Append("\n");
            sb.Append("  NoOfPhysicians: ").Append(NoOfPhysicians).Append("\n");
            sb.Append("  GL: ").Append(GL).Append("\n");
            sb.Append("  EBL: ").Append(EBL).Append("\n");
            sb.Append("  HNOA: ").Append(HNOA).Append("\n");
            sb.Append("  Laser: ").Append(Laser).Append("\n");
            sb.Append("  Retention: ").Append(Retention).Append("\n");
            sb.Append("  Premium: ").Append(Premium).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as QuotePost);
        }

        /// <summary>
        /// Returns true if QuotePost instances are equal
        /// </summary>
        /// <param name="input">Instance of QuotePost to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QuotePost input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EffectiveDate == input.EffectiveDate ||
                    (this.EffectiveDate != null &&
                    this.EffectiveDate.Equals(input.EffectiveDate))
                ) && 
                (
                    this.RetroDate == input.RetroDate ||
                    (this.RetroDate != null &&
                    this.RetroDate.Equals(input.RetroDate))
                ) && 
                (
                    this.Zipcode == input.Zipcode ||
                    (this.Zipcode != null &&
                    this.Zipcode.Equals(input.Zipcode))
                ) && 
                (
                    this.GrossRevenues == input.GrossRevenues ||
                    (this.GrossRevenues != null &&
                    this.GrossRevenues.Equals(input.GrossRevenues))
                ) && 
                (
                    this.NoOfPhysicians == input.NoOfPhysicians ||
                    (this.NoOfPhysicians != null &&
                    this.NoOfPhysicians.Equals(input.NoOfPhysicians))
                ) && 
                (
                    this.GL == input.GL ||
                    (this.GL != null &&
                    this.GL.Equals(input.GL))
                ) && 
                (
                    this.EBL == input.EBL ||
                    (this.EBL != null &&
                    this.EBL.Equals(input.EBL))
                ) && 
                (
                    this.HNOA == input.HNOA ||
                    (this.HNOA != null &&
                    this.HNOA.Equals(input.HNOA))
                ) && 
                (
                    this.Laser == input.Laser ||
                    (this.Laser != null &&
                    this.Laser.Equals(input.Laser))
                ) && 
                (
                    this.Retention == input.Retention ||
                    (this.Retention != null &&
                    this.Retention.Equals(input.Retention))
                ) && 
                (
                    this.Premium == input.Premium ||
                    (this.Premium != null &&
                    this.Premium.Equals(input.Premium))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EffectiveDate != null)
                    hashCode = hashCode * 59 + this.EffectiveDate.GetHashCode();
                if (this.RetroDate != null)
                    hashCode = hashCode * 59 + this.RetroDate.GetHashCode();
                if (this.Zipcode != null)
                    hashCode = hashCode * 59 + this.Zipcode.GetHashCode();
                if (this.GrossRevenues != null)
                    hashCode = hashCode * 59 + this.GrossRevenues.GetHashCode();
                if (this.NoOfPhysicians != null)
                    hashCode = hashCode * 59 + this.NoOfPhysicians.GetHashCode();
                if (this.GL != null)
                    hashCode = hashCode * 59 + this.GL.GetHashCode();
                if (this.EBL != null)
                    hashCode = hashCode * 59 + this.EBL.GetHashCode();
                if (this.HNOA != null)
                    hashCode = hashCode * 59 + this.HNOA.GetHashCode();
                if (this.Laser != null)
                    hashCode = hashCode * 59 + this.Laser.GetHashCode();
                if (this.Retention != null)
                    hashCode = hashCode * 59 + this.Retention.GetHashCode();
                if (this.Premium != null)
                    hashCode = hashCode * 59 + this.Premium.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
