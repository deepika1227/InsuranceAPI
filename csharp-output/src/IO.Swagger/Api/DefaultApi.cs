/* 
 * Insurance API
 *
 * Insurance API Curd Operations
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IDefaultApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves a agent by ID
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentID">The ID of the agent to retrieve</param>
        /// <returns>AgentList</returns>
        AgentList AgentAgentIDGet (string agentID);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves a agent by ID
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentID">The ID of the agent to retrieve</param>
        /// <returns>ApiResponse of AgentList</returns>
        ApiResponse<AgentList> AgentAgentIDGetWithHttpInfo (string agentID);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update Agent
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentID">The ID of the agent to retrieve</param>
        /// <returns>AgentPatch</returns>
        AgentPatch AgentAgentIDPatch (AgentPatch agentID);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update Agent
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentID">The ID of the agent to retrieve</param>
        /// <returns>ApiResponse of AgentPatch</returns>
        ApiResponse<AgentPatch> AgentAgentIDPatchWithHttpInfo (AgentPatch agentID);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get agent list.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodylimit">The amount of agents returned (optional)</param>
        /// <param name="pagelimit">The page to return insurance information (optional)</param>
        /// <returns>AgentList</returns>
        AgentList AgentGet (int? bodylimit = null, int? pagelimit = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get agent list.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodylimit">The amount of agents returned (optional)</param>
        /// <param name="pagelimit">The page to return insurance information (optional)</param>
        /// <returns>ApiResponse of AgentList</returns>
        ApiResponse<AgentList> AgentGetWithHttpInfo (int? bodylimit = null, int? pagelimit = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Submits a new agent,By passing in the appropriate options, you can Add new Agent in the system
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns></returns>
        void AgentPost (Agent body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Submits a new agent,By passing in the appropriate options, you can Add new Agent in the system
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AgentPostWithHttpInfo (Agent body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves a Policy by ID
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyID">The ID of the Policy to retrieve</param>
        /// <param name="fromDate">Enter From Date</param>
        /// <param name="toDate">Enter to Date</param>
        /// <param name="rowsPerPage">Enter Rows Per Page</param>
        /// <param name="preFetchPages">pre Fetch Pages</param>
        /// <returns>Policy</returns>
        Policy PolicyGet (string policyID, string fromDate, string toDate, int? rowsPerPage, int? preFetchPages);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves a Policy by ID
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyID">The ID of the Policy to retrieve</param>
        /// <param name="fromDate">Enter From Date</param>
        /// <param name="toDate">Enter to Date</param>
        /// <param name="rowsPerPage">Enter Rows Per Page</param>
        /// <param name="preFetchPages">pre Fetch Pages</param>
        /// <returns>ApiResponse of Policy</returns>
        ApiResponse<Policy> PolicyGetWithHttpInfo (string policyID, string fromDate, string toDate, int? rowsPerPage, int? preFetchPages);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Submits a new policy,By passing in the appropriate options, you can Add new policy in the system
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns></returns>
        void PolicyPost (Policy body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Submits a new policy,By passing in the appropriate options, you can Add new policy in the system
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PolicyPostWithHttpInfo (Policy body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves a list of quotes.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodylimit">The amount of quotes returned (optional)</param>
        /// <param name="pagelimit">The page to return insurance information (optional)</param>
        /// <returns>QuotePost</returns>
        QuotePost QuoteGet (int? bodylimit = null, int? pagelimit = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves a list of quotes.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodylimit">The amount of quotes returned (optional)</param>
        /// <param name="pagelimit">The page to return insurance information (optional)</param>
        /// <returns>ApiResponse of QuotePost</returns>
        ApiResponse<QuotePost> QuoteGetWithHttpInfo (int? bodylimit = null, int? pagelimit = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Submits a new quote.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns></returns>
        void QuotePost (QuotePost body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Submits a new quote.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> QuotePostWithHttpInfo (QuotePost body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves a quote by ID
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteID">The ID of the quote to retrieve</param>
        /// <returns>QuotePost</returns>
        QuotePost QuoteQuoteIDGet (string quoteID);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves a quote by ID
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteID">The ID of the quote to retrieve</param>
        /// <returns>ApiResponse of QuotePost</returns>
        ApiResponse<QuotePost> QuoteQuoteIDGetWithHttpInfo (string quoteID);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves a list of quotes.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodylimit">The amount of quotes returned (optional)</param>
        /// <param name="pagelimit">The page to return insurance information (optional)</param>
        /// <returns>Submission</returns>
        Submission SubmissionGet (int? bodylimit = null, int? pagelimit = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves a list of quotes.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodylimit">The amount of quotes returned (optional)</param>
        /// <param name="pagelimit">The page to return insurance information (optional)</param>
        /// <returns>ApiResponse of Submission</returns>
        ApiResponse<Submission> SubmissionGetWithHttpInfo (int? bodylimit = null, int? pagelimit = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Submits a new submission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns></returns>
        void SubmissionPost (SubmissionPost body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Submits a new submission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SubmissionPostWithHttpInfo (SubmissionPost body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves a agent by ID
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentID">The ID of the agent to retrieve</param>
        /// <returns>Task of AgentList</returns>
        System.Threading.Tasks.Task<AgentList> AgentAgentIDGetAsync (string agentID);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves a agent by ID
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentID">The ID of the agent to retrieve</param>
        /// <returns>Task of ApiResponse (AgentList)</returns>
        System.Threading.Tasks.Task<ApiResponse<AgentList>> AgentAgentIDGetAsyncWithHttpInfo (string agentID);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update Agent
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentID">The ID of the agent to retrieve</param>
        /// <returns>Task of AgentPatch</returns>
        System.Threading.Tasks.Task<AgentPatch> AgentAgentIDPatchAsync (AgentPatch agentID);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update Agent
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentID">The ID of the agent to retrieve</param>
        /// <returns>Task of ApiResponse (AgentPatch)</returns>
        System.Threading.Tasks.Task<ApiResponse<AgentPatch>> AgentAgentIDPatchAsyncWithHttpInfo (AgentPatch agentID);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get agent list.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodylimit">The amount of agents returned (optional)</param>
        /// <param name="pagelimit">The page to return insurance information (optional)</param>
        /// <returns>Task of AgentList</returns>
        System.Threading.Tasks.Task<AgentList> AgentGetAsync (int? bodylimit = null, int? pagelimit = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get agent list.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodylimit">The amount of agents returned (optional)</param>
        /// <param name="pagelimit">The page to return insurance information (optional)</param>
        /// <returns>Task of ApiResponse (AgentList)</returns>
        System.Threading.Tasks.Task<ApiResponse<AgentList>> AgentGetAsyncWithHttpInfo (int? bodylimit = null, int? pagelimit = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Submits a new agent,By passing in the appropriate options, you can Add new Agent in the system
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AgentPostAsync (Agent body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Submits a new agent,By passing in the appropriate options, you can Add new Agent in the system
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AgentPostAsyncWithHttpInfo (Agent body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves a Policy by ID
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyID">The ID of the Policy to retrieve</param>
        /// <param name="fromDate">Enter From Date</param>
        /// <param name="toDate">Enter to Date</param>
        /// <param name="rowsPerPage">Enter Rows Per Page</param>
        /// <param name="preFetchPages">pre Fetch Pages</param>
        /// <returns>Task of Policy</returns>
        System.Threading.Tasks.Task<Policy> PolicyGetAsync (string policyID, string fromDate, string toDate, int? rowsPerPage, int? preFetchPages);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves a Policy by ID
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyID">The ID of the Policy to retrieve</param>
        /// <param name="fromDate">Enter From Date</param>
        /// <param name="toDate">Enter to Date</param>
        /// <param name="rowsPerPage">Enter Rows Per Page</param>
        /// <param name="preFetchPages">pre Fetch Pages</param>
        /// <returns>Task of ApiResponse (Policy)</returns>
        System.Threading.Tasks.Task<ApiResponse<Policy>> PolicyGetAsyncWithHttpInfo (string policyID, string fromDate, string toDate, int? rowsPerPage, int? preFetchPages);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Submits a new policy,By passing in the appropriate options, you can Add new policy in the system
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PolicyPostAsync (Policy body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Submits a new policy,By passing in the appropriate options, you can Add new policy in the system
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PolicyPostAsyncWithHttpInfo (Policy body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves a list of quotes.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodylimit">The amount of quotes returned (optional)</param>
        /// <param name="pagelimit">The page to return insurance information (optional)</param>
        /// <returns>Task of QuotePost</returns>
        System.Threading.Tasks.Task<QuotePost> QuoteGetAsync (int? bodylimit = null, int? pagelimit = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves a list of quotes.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodylimit">The amount of quotes returned (optional)</param>
        /// <param name="pagelimit">The page to return insurance information (optional)</param>
        /// <returns>Task of ApiResponse (QuotePost)</returns>
        System.Threading.Tasks.Task<ApiResponse<QuotePost>> QuoteGetAsyncWithHttpInfo (int? bodylimit = null, int? pagelimit = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Submits a new quote.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task QuotePostAsync (QuotePost body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Submits a new quote.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> QuotePostAsyncWithHttpInfo (QuotePost body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves a quote by ID
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteID">The ID of the quote to retrieve</param>
        /// <returns>Task of QuotePost</returns>
        System.Threading.Tasks.Task<QuotePost> QuoteQuoteIDGetAsync (string quoteID);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves a quote by ID
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteID">The ID of the quote to retrieve</param>
        /// <returns>Task of ApiResponse (QuotePost)</returns>
        System.Threading.Tasks.Task<ApiResponse<QuotePost>> QuoteQuoteIDGetAsyncWithHttpInfo (string quoteID);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves a list of quotes.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodylimit">The amount of quotes returned (optional)</param>
        /// <param name="pagelimit">The page to return insurance information (optional)</param>
        /// <returns>Task of Submission</returns>
        System.Threading.Tasks.Task<Submission> SubmissionGetAsync (int? bodylimit = null, int? pagelimit = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves a list of quotes.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodylimit">The amount of quotes returned (optional)</param>
        /// <param name="pagelimit">The page to return insurance information (optional)</param>
        /// <returns>Task of ApiResponse (Submission)</returns>
        System.Threading.Tasks.Task<ApiResponse<Submission>> SubmissionGetAsyncWithHttpInfo (int? bodylimit = null, int? pagelimit = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Submits a new submission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SubmissionPostAsync (SubmissionPost body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Submits a new submission.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SubmissionPostAsyncWithHttpInfo (SubmissionPost body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class DefaultApi : IDefaultApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// </summary>
        /// <returns></returns>
        public DefaultApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Retrieves a agent by ID
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentID">The ID of the agent to retrieve</param>
        /// <returns>AgentList</returns>
        public AgentList AgentAgentIDGet (string agentID)
        {
             ApiResponse<AgentList> localVarResponse = AgentAgentIDGetWithHttpInfo(agentID);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves a agent by ID
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentID">The ID of the agent to retrieve</param>
        /// <returns>ApiResponse of AgentList</returns>
        public ApiResponse< AgentList > AgentAgentIDGetWithHttpInfo (string agentID)
        {
            // verify the required parameter 'agentID' is set
            if (agentID == null)
                throw new ApiException(400, "Missing required parameter 'agentID' when calling DefaultApi->AgentAgentIDGet");

            var localVarPath = "/agent/{AgentID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (agentID != null) localVarPathParams.Add("AgentID", this.Configuration.ApiClient.ParameterToString(agentID)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AgentAgentIDGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AgentList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AgentList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AgentList)));
        }

        /// <summary>
        ///  Retrieves a agent by ID
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentID">The ID of the agent to retrieve</param>
        /// <returns>Task of AgentList</returns>
        public async System.Threading.Tasks.Task<AgentList> AgentAgentIDGetAsync (string agentID)
        {
             ApiResponse<AgentList> localVarResponse = await AgentAgentIDGetAsyncWithHttpInfo(agentID);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves a agent by ID
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentID">The ID of the agent to retrieve</param>
        /// <returns>Task of ApiResponse (AgentList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AgentList>> AgentAgentIDGetAsyncWithHttpInfo (string agentID)
        {
            // verify the required parameter 'agentID' is set
            if (agentID == null)
                throw new ApiException(400, "Missing required parameter 'agentID' when calling DefaultApi->AgentAgentIDGet");

            var localVarPath = "/agent/{AgentID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (agentID != null) localVarPathParams.Add("AgentID", this.Configuration.ApiClient.ParameterToString(agentID)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AgentAgentIDGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AgentList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AgentList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AgentList)));
        }

        /// <summary>
        ///  Update Agent
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentID">The ID of the agent to retrieve</param>
        /// <returns>AgentPatch</returns>
        public AgentPatch AgentAgentIDPatch (AgentPatch agentID)
        {
             ApiResponse<AgentPatch> localVarResponse = AgentAgentIDPatchWithHttpInfo(agentID);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Update Agent
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentID">The ID of the agent to retrieve</param>
        /// <returns>ApiResponse of AgentPatch</returns>
        public ApiResponse< AgentPatch > AgentAgentIDPatchWithHttpInfo (AgentPatch agentID)
        {
            // verify the required parameter 'agentID' is set
            if (agentID == null)
                throw new ApiException(400, "Missing required parameter 'agentID' when calling DefaultApi->AgentAgentIDPatch");

            var localVarPath = "/agent/{AgentID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (agentID != null) localVarPathParams.Add("AgentID", this.Configuration.ApiClient.ParameterToString(agentID)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AgentAgentIDPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AgentPatch>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AgentPatch) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AgentPatch)));
        }

        /// <summary>
        ///  Update Agent
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentID">The ID of the agent to retrieve</param>
        /// <returns>Task of AgentPatch</returns>
        public async System.Threading.Tasks.Task<AgentPatch> AgentAgentIDPatchAsync (AgentPatch agentID)
        {
             ApiResponse<AgentPatch> localVarResponse = await AgentAgentIDPatchAsyncWithHttpInfo(agentID);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Update Agent
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentID">The ID of the agent to retrieve</param>
        /// <returns>Task of ApiResponse (AgentPatch)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AgentPatch>> AgentAgentIDPatchAsyncWithHttpInfo (AgentPatch agentID)
        {
            // verify the required parameter 'agentID' is set
            if (agentID == null)
                throw new ApiException(400, "Missing required parameter 'agentID' when calling DefaultApi->AgentAgentIDPatch");

            var localVarPath = "/agent/{AgentID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (agentID != null) localVarPathParams.Add("AgentID", this.Configuration.ApiClient.ParameterToString(agentID)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AgentAgentIDPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AgentPatch>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AgentPatch) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AgentPatch)));
        }

        /// <summary>
        ///  get agent list.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodylimit">The amount of agents returned (optional)</param>
        /// <param name="pagelimit">The page to return insurance information (optional)</param>
        /// <returns>AgentList</returns>
        public AgentList AgentGet (int? bodylimit = null, int? pagelimit = null)
        {
             ApiResponse<AgentList> localVarResponse = AgentGetWithHttpInfo(bodylimit, pagelimit);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  get agent list.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodylimit">The amount of agents returned (optional)</param>
        /// <param name="pagelimit">The page to return insurance information (optional)</param>
        /// <returns>ApiResponse of AgentList</returns>
        public ApiResponse< AgentList > AgentGetWithHttpInfo (int? bodylimit = null, int? pagelimit = null)
        {

            var localVarPath = "/agent";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bodylimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "bodylimit", bodylimit)); // query parameter
            if (pagelimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pagelimit", pagelimit)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AgentGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AgentList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AgentList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AgentList)));
        }

        /// <summary>
        ///  get agent list.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodylimit">The amount of agents returned (optional)</param>
        /// <param name="pagelimit">The page to return insurance information (optional)</param>
        /// <returns>Task of AgentList</returns>
        public async System.Threading.Tasks.Task<AgentList> AgentGetAsync (int? bodylimit = null, int? pagelimit = null)
        {
             ApiResponse<AgentList> localVarResponse = await AgentGetAsyncWithHttpInfo(bodylimit, pagelimit);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  get agent list.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodylimit">The amount of agents returned (optional)</param>
        /// <param name="pagelimit">The page to return insurance information (optional)</param>
        /// <returns>Task of ApiResponse (AgentList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AgentList>> AgentGetAsyncWithHttpInfo (int? bodylimit = null, int? pagelimit = null)
        {

            var localVarPath = "/agent";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bodylimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "bodylimit", bodylimit)); // query parameter
            if (pagelimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pagelimit", pagelimit)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AgentGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AgentList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AgentList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AgentList)));
        }

        /// <summary>
        ///  Submits a new agent,By passing in the appropriate options, you can Add new Agent in the system
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns></returns>
        public void AgentPost (Agent body)
        {
             AgentPostWithHttpInfo(body);
        }

        /// <summary>
        ///  Submits a new agent,By passing in the appropriate options, you can Add new Agent in the system
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AgentPostWithHttpInfo (Agent body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->AgentPost");

            var localVarPath = "/agent";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AgentPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Submits a new agent,By passing in the appropriate options, you can Add new Agent in the system
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AgentPostAsync (Agent body)
        {
             await AgentPostAsyncWithHttpInfo(body);

        }

        /// <summary>
        ///  Submits a new agent,By passing in the appropriate options, you can Add new Agent in the system
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AgentPostAsyncWithHttpInfo (Agent body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->AgentPost");

            var localVarPath = "/agent";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AgentPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Retrieves a Policy by ID
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyID">The ID of the Policy to retrieve</param>
        /// <param name="fromDate">Enter From Date</param>
        /// <param name="toDate">Enter to Date</param>
        /// <param name="rowsPerPage">Enter Rows Per Page</param>
        /// <param name="preFetchPages">pre Fetch Pages</param>
        /// <returns>Policy</returns>
        public Policy PolicyGet (string policyID, string fromDate, string toDate, int? rowsPerPage, int? preFetchPages)
        {
             ApiResponse<Policy> localVarResponse = PolicyGetWithHttpInfo(policyID, fromDate, toDate, rowsPerPage, preFetchPages);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves a Policy by ID
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyID">The ID of the Policy to retrieve</param>
        /// <param name="fromDate">Enter From Date</param>
        /// <param name="toDate">Enter to Date</param>
        /// <param name="rowsPerPage">Enter Rows Per Page</param>
        /// <param name="preFetchPages">pre Fetch Pages</param>
        /// <returns>ApiResponse of Policy</returns>
        public ApiResponse< Policy > PolicyGetWithHttpInfo (string policyID, string fromDate, string toDate, int? rowsPerPage, int? preFetchPages)
        {
            // verify the required parameter 'policyID' is set
            if (policyID == null)
                throw new ApiException(400, "Missing required parameter 'policyID' when calling DefaultApi->PolicyGet");
            // verify the required parameter 'fromDate' is set
            if (fromDate == null)
                throw new ApiException(400, "Missing required parameter 'fromDate' when calling DefaultApi->PolicyGet");
            // verify the required parameter 'toDate' is set
            if (toDate == null)
                throw new ApiException(400, "Missing required parameter 'toDate' when calling DefaultApi->PolicyGet");
            // verify the required parameter 'rowsPerPage' is set
            if (rowsPerPage == null)
                throw new ApiException(400, "Missing required parameter 'rowsPerPage' when calling DefaultApi->PolicyGet");
            // verify the required parameter 'preFetchPages' is set
            if (preFetchPages == null)
                throw new ApiException(400, "Missing required parameter 'preFetchPages' when calling DefaultApi->PolicyGet");

            var localVarPath = "/policy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (policyID != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "PolicyID", policyID)); // query parameter
            if (fromDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "FromDate", fromDate)); // query parameter
            if (toDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "toDate", toDate)); // query parameter
            if (rowsPerPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "rowsPerPage", rowsPerPage)); // query parameter
            if (preFetchPages != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "preFetchPages", preFetchPages)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PolicyGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Policy>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Policy) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Policy)));
        }

        /// <summary>
        ///  Retrieves a Policy by ID
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyID">The ID of the Policy to retrieve</param>
        /// <param name="fromDate">Enter From Date</param>
        /// <param name="toDate">Enter to Date</param>
        /// <param name="rowsPerPage">Enter Rows Per Page</param>
        /// <param name="preFetchPages">pre Fetch Pages</param>
        /// <returns>Task of Policy</returns>
        public async System.Threading.Tasks.Task<Policy> PolicyGetAsync (string policyID, string fromDate, string toDate, int? rowsPerPage, int? preFetchPages)
        {
             ApiResponse<Policy> localVarResponse = await PolicyGetAsyncWithHttpInfo(policyID, fromDate, toDate, rowsPerPage, preFetchPages);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves a Policy by ID
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyID">The ID of the Policy to retrieve</param>
        /// <param name="fromDate">Enter From Date</param>
        /// <param name="toDate">Enter to Date</param>
        /// <param name="rowsPerPage">Enter Rows Per Page</param>
        /// <param name="preFetchPages">pre Fetch Pages</param>
        /// <returns>Task of ApiResponse (Policy)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Policy>> PolicyGetAsyncWithHttpInfo (string policyID, string fromDate, string toDate, int? rowsPerPage, int? preFetchPages)
        {
            // verify the required parameter 'policyID' is set
            if (policyID == null)
                throw new ApiException(400, "Missing required parameter 'policyID' when calling DefaultApi->PolicyGet");
            // verify the required parameter 'fromDate' is set
            if (fromDate == null)
                throw new ApiException(400, "Missing required parameter 'fromDate' when calling DefaultApi->PolicyGet");
            // verify the required parameter 'toDate' is set
            if (toDate == null)
                throw new ApiException(400, "Missing required parameter 'toDate' when calling DefaultApi->PolicyGet");
            // verify the required parameter 'rowsPerPage' is set
            if (rowsPerPage == null)
                throw new ApiException(400, "Missing required parameter 'rowsPerPage' when calling DefaultApi->PolicyGet");
            // verify the required parameter 'preFetchPages' is set
            if (preFetchPages == null)
                throw new ApiException(400, "Missing required parameter 'preFetchPages' when calling DefaultApi->PolicyGet");

            var localVarPath = "/policy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (policyID != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "PolicyID", policyID)); // query parameter
            if (fromDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "FromDate", fromDate)); // query parameter
            if (toDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "toDate", toDate)); // query parameter
            if (rowsPerPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "rowsPerPage", rowsPerPage)); // query parameter
            if (preFetchPages != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "preFetchPages", preFetchPages)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PolicyGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Policy>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Policy) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Policy)));
        }

        /// <summary>
        ///  Submits a new policy,By passing in the appropriate options, you can Add new policy in the system
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns></returns>
        public void PolicyPost (Policy body)
        {
             PolicyPostWithHttpInfo(body);
        }

        /// <summary>
        ///  Submits a new policy,By passing in the appropriate options, you can Add new policy in the system
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PolicyPostWithHttpInfo (Policy body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->PolicyPost");

            var localVarPath = "/policy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PolicyPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Submits a new policy,By passing in the appropriate options, you can Add new policy in the system
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PolicyPostAsync (Policy body)
        {
             await PolicyPostAsyncWithHttpInfo(body);

        }

        /// <summary>
        ///  Submits a new policy,By passing in the appropriate options, you can Add new policy in the system
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PolicyPostAsyncWithHttpInfo (Policy body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->PolicyPost");

            var localVarPath = "/policy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PolicyPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Retrieves a list of quotes.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodylimit">The amount of quotes returned (optional)</param>
        /// <param name="pagelimit">The page to return insurance information (optional)</param>
        /// <returns>QuotePost</returns>
        public QuotePost QuoteGet (int? bodylimit = null, int? pagelimit = null)
        {
             ApiResponse<QuotePost> localVarResponse = QuoteGetWithHttpInfo(bodylimit, pagelimit);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves a list of quotes.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodylimit">The amount of quotes returned (optional)</param>
        /// <param name="pagelimit">The page to return insurance information (optional)</param>
        /// <returns>ApiResponse of QuotePost</returns>
        public ApiResponse< QuotePost > QuoteGetWithHttpInfo (int? bodylimit = null, int? pagelimit = null)
        {

            var localVarPath = "/quote";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bodylimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "bodylimit", bodylimit)); // query parameter
            if (pagelimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pagelimit", pagelimit)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuoteGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QuotePost>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (QuotePost) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QuotePost)));
        }

        /// <summary>
        ///  Retrieves a list of quotes.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodylimit">The amount of quotes returned (optional)</param>
        /// <param name="pagelimit">The page to return insurance information (optional)</param>
        /// <returns>Task of QuotePost</returns>
        public async System.Threading.Tasks.Task<QuotePost> QuoteGetAsync (int? bodylimit = null, int? pagelimit = null)
        {
             ApiResponse<QuotePost> localVarResponse = await QuoteGetAsyncWithHttpInfo(bodylimit, pagelimit);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves a list of quotes.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodylimit">The amount of quotes returned (optional)</param>
        /// <param name="pagelimit">The page to return insurance information (optional)</param>
        /// <returns>Task of ApiResponse (QuotePost)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<QuotePost>> QuoteGetAsyncWithHttpInfo (int? bodylimit = null, int? pagelimit = null)
        {

            var localVarPath = "/quote";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bodylimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "bodylimit", bodylimit)); // query parameter
            if (pagelimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pagelimit", pagelimit)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuoteGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QuotePost>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (QuotePost) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QuotePost)));
        }

        /// <summary>
        ///  Submits a new quote.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns></returns>
        public void QuotePost (QuotePost body)
        {
             QuotePostWithHttpInfo(body);
        }

        /// <summary>
        ///  Submits a new quote.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> QuotePostWithHttpInfo (QuotePost body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->QuotePost");

            var localVarPath = "/quote";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Submits a new quote.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task QuotePostAsync (QuotePost body)
        {
             await QuotePostAsyncWithHttpInfo(body);

        }

        /// <summary>
        ///  Submits a new quote.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> QuotePostAsyncWithHttpInfo (QuotePost body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->QuotePost");

            var localVarPath = "/quote";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Retrieves a quote by ID
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteID">The ID of the quote to retrieve</param>
        /// <returns>QuotePost</returns>
        public QuotePost QuoteQuoteIDGet (string quoteID)
        {
             ApiResponse<QuotePost> localVarResponse = QuoteQuoteIDGetWithHttpInfo(quoteID);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves a quote by ID
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteID">The ID of the quote to retrieve</param>
        /// <returns>ApiResponse of QuotePost</returns>
        public ApiResponse< QuotePost > QuoteQuoteIDGetWithHttpInfo (string quoteID)
        {
            // verify the required parameter 'quoteID' is set
            if (quoteID == null)
                throw new ApiException(400, "Missing required parameter 'quoteID' when calling DefaultApi->QuoteQuoteIDGet");

            var localVarPath = "/quote/{quoteID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quoteID != null) localVarPathParams.Add("quoteID", this.Configuration.ApiClient.ParameterToString(quoteID)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuoteQuoteIDGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QuotePost>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (QuotePost) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QuotePost)));
        }

        /// <summary>
        ///  Retrieves a quote by ID
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteID">The ID of the quote to retrieve</param>
        /// <returns>Task of QuotePost</returns>
        public async System.Threading.Tasks.Task<QuotePost> QuoteQuoteIDGetAsync (string quoteID)
        {
             ApiResponse<QuotePost> localVarResponse = await QuoteQuoteIDGetAsyncWithHttpInfo(quoteID);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves a quote by ID
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteID">The ID of the quote to retrieve</param>
        /// <returns>Task of ApiResponse (QuotePost)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<QuotePost>> QuoteQuoteIDGetAsyncWithHttpInfo (string quoteID)
        {
            // verify the required parameter 'quoteID' is set
            if (quoteID == null)
                throw new ApiException(400, "Missing required parameter 'quoteID' when calling DefaultApi->QuoteQuoteIDGet");

            var localVarPath = "/quote/{quoteID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quoteID != null) localVarPathParams.Add("quoteID", this.Configuration.ApiClient.ParameterToString(quoteID)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuoteQuoteIDGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QuotePost>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (QuotePost) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QuotePost)));
        }

        /// <summary>
        ///  Retrieves a list of quotes.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodylimit">The amount of quotes returned (optional)</param>
        /// <param name="pagelimit">The page to return insurance information (optional)</param>
        /// <returns>Submission</returns>
        public Submission SubmissionGet (int? bodylimit = null, int? pagelimit = null)
        {
             ApiResponse<Submission> localVarResponse = SubmissionGetWithHttpInfo(bodylimit, pagelimit);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves a list of quotes.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodylimit">The amount of quotes returned (optional)</param>
        /// <param name="pagelimit">The page to return insurance information (optional)</param>
        /// <returns>ApiResponse of Submission</returns>
        public ApiResponse< Submission > SubmissionGetWithHttpInfo (int? bodylimit = null, int? pagelimit = null)
        {

            var localVarPath = "/submission";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bodylimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "bodylimit", bodylimit)); // query parameter
            if (pagelimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pagelimit", pagelimit)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubmissionGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Submission>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Submission) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Submission)));
        }

        /// <summary>
        ///  Retrieves a list of quotes.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodylimit">The amount of quotes returned (optional)</param>
        /// <param name="pagelimit">The page to return insurance information (optional)</param>
        /// <returns>Task of Submission</returns>
        public async System.Threading.Tasks.Task<Submission> SubmissionGetAsync (int? bodylimit = null, int? pagelimit = null)
        {
             ApiResponse<Submission> localVarResponse = await SubmissionGetAsyncWithHttpInfo(bodylimit, pagelimit);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves a list of quotes.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodylimit">The amount of quotes returned (optional)</param>
        /// <param name="pagelimit">The page to return insurance information (optional)</param>
        /// <returns>Task of ApiResponse (Submission)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Submission>> SubmissionGetAsyncWithHttpInfo (int? bodylimit = null, int? pagelimit = null)
        {

            var localVarPath = "/submission";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bodylimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "bodylimit", bodylimit)); // query parameter
            if (pagelimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pagelimit", pagelimit)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubmissionGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Submission>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Submission) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Submission)));
        }

        /// <summary>
        ///  Submits a new submission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns></returns>
        public void SubmissionPost (SubmissionPost body)
        {
             SubmissionPostWithHttpInfo(body);
        }

        /// <summary>
        ///  Submits a new submission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SubmissionPostWithHttpInfo (SubmissionPost body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->SubmissionPost");

            var localVarPath = "/submission";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubmissionPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Submits a new submission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SubmissionPostAsync (SubmissionPost body)
        {
             await SubmissionPostAsyncWithHttpInfo(body);

        }

        /// <summary>
        ///  Submits a new submission.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SubmissionPostAsyncWithHttpInfo (SubmissionPost body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->SubmissionPost");

            var localVarPath = "/submission";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubmissionPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
