/* 
 * Insurance API
 *
 * Insurance API Curd Operations
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing DefaultApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class DefaultApiTests
    {
        private DefaultApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new DefaultApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of DefaultApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' DefaultApi
            //Assert.IsInstanceOfType(typeof(DefaultApi), instance, "instance is a DefaultApi");
        }

        /// <summary>
        /// Test AgentAgentIDGet
        /// </summary>
        [Test]
        public void AgentAgentIDGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string agentID = null;
            //var response = instance.AgentAgentIDGet(agentID);
            //Assert.IsInstanceOf<AgentList> (response, "response is AgentList");
        }
        /// <summary>
        /// Test AgentAgentIDPatch
        /// </summary>
        [Test]
        public void AgentAgentIDPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AgentPatch agentID = null;
            //var response = instance.AgentAgentIDPatch(agentID);
            //Assert.IsInstanceOf<AgentPatch> (response, "response is AgentPatch");
        }
        /// <summary>
        /// Test AgentGet
        /// </summary>
        [Test]
        public void AgentGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? bodylimit = null;
            //int? pagelimit = null;
            //var response = instance.AgentGet(bodylimit, pagelimit);
            //Assert.IsInstanceOf<AgentList> (response, "response is AgentList");
        }
        /// <summary>
        /// Test AgentPost
        /// </summary>
        [Test]
        public void AgentPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Agent body = null;
            //instance.AgentPost(body);
            
        }
        /// <summary>
        /// Test PolicyGet
        /// </summary>
        [Test]
        public void PolicyGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string policyID = null;
            //string fromDate = null;
            //string toDate = null;
            //int? rowsPerPage = null;
            //int? preFetchPages = null;
            //var response = instance.PolicyGet(policyID, fromDate, toDate, rowsPerPage, preFetchPages);
            //Assert.IsInstanceOf<Policy> (response, "response is Policy");
        }
        /// <summary>
        /// Test PolicyPost
        /// </summary>
        [Test]
        public void PolicyPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Policy body = null;
            //instance.PolicyPost(body);
            
        }
        /// <summary>
        /// Test QuoteGet
        /// </summary>
        [Test]
        public void QuoteGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? bodylimit = null;
            //int? pagelimit = null;
            //var response = instance.QuoteGet(bodylimit, pagelimit);
            //Assert.IsInstanceOf<QuotePost> (response, "response is QuotePost");
        }
        /// <summary>
        /// Test QuotePost
        /// </summary>
        [Test]
        public void QuotePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //QuotePost body = null;
            //instance.QuotePost(body);
            
        }
        /// <summary>
        /// Test QuoteQuoteIDGet
        /// </summary>
        [Test]
        public void QuoteQuoteIDGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string quoteID = null;
            //var response = instance.QuoteQuoteIDGet(quoteID);
            //Assert.IsInstanceOf<QuotePost> (response, "response is QuotePost");
        }
        /// <summary>
        /// Test SubmissionGet
        /// </summary>
        [Test]
        public void SubmissionGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? bodylimit = null;
            //int? pagelimit = null;
            //var response = instance.SubmissionGet(bodylimit, pagelimit);
            //Assert.IsInstanceOf<Submission> (response, "response is Submission");
        }
        /// <summary>
        /// Test SubmissionPost
        /// </summary>
        [Test]
        public void SubmissionPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SubmissionPost body = null;
            //instance.SubmissionPost(body);
            
        }
    }

}
